/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FlashSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emergencyWithdraw"
      | "fundFlashSwapContract"
      | "getBalanceOfToken"
      | "getBaseToken"
      | "getDeadlineMinutes"
      | "getDebugMode"
      | "getDefaultSlippage"
      | "getFactory"
      | "getRouter"
      | "getTestMode"
      | "pancakeCall"
      | "setDeadlineMinutes"
      | "setDebugMode"
      | "setDefaultSlippage"
      | "setTestMode"
      | "start"
      | "withdrawBaseToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArbitrageExecuted"
      | "DebugFlashLoanReceived"
      | "DebugPoolLiquidity"
      | "DebugTradeExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundFlashSwapContract",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceOfToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeadlineMinutes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebugMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTestMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeCall",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeadlineMinutes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebugMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTestMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "start",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBaseToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundFlashSwapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeadlineMinutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebugMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTestMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeadlineMinutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebugMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTestMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBaseToken",
    data: BytesLike
  ): Result;
}

export namespace ArbitrageExecutedEvent {
  export type InputTuple = [
    tokenBorrowed: AddressLike,
    amountBorrowed: BigNumberish,
    amountReturned: BigNumberish,
    profit: BigNumberish,
    success: boolean
  ];
  export type OutputTuple = [
    tokenBorrowed: string,
    amountBorrowed: bigint,
    amountReturned: bigint,
    profit: bigint,
    success: boolean
  ];
  export interface OutputObject {
    tokenBorrowed: string;
    amountBorrowed: bigint;
    amountReturned: bigint;
    profit: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugFlashLoanReceivedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugPoolLiquidityEvent {
  export type InputTuple = [
    pair: AddressLike,
    token0: AddressLike,
    token1: AddressLike,
    reserve0: BigNumberish,
    reserve1: BigNumberish
  ];
  export type OutputTuple = [
    pair: string,
    token0: string,
    token1: string,
    reserve0: bigint,
    reserve1: bigint
  ];
  export interface OutputObject {
    pair: string;
    token0: string;
    token1: string;
    reserve0: bigint;
    reserve1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugTradeExecutedEvent {
  export type InputTuple = [
    tradeNumber: BigNumberish,
    fromToken: AddressLike,
    toToken: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    tradeNumber: bigint,
    fromToken: string,
    toToken: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    tradeNumber: bigint;
    fromToken: string;
    toToken: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlashSwap extends BaseContract {
  connect(runner?: ContractRunner | null): FlashSwap;
  waitForDeployment(): Promise<this>;

  interface: FlashSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emergencyWithdraw: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  fundFlashSwapContract: TypedContractMethod<
    [_owner: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalanceOfToken: TypedContractMethod<
    [_token: AddressLike],
    [bigint],
    "view"
  >;

  getBaseToken: TypedContractMethod<[], [string], "view">;

  getDeadlineMinutes: TypedContractMethod<[], [bigint], "view">;

  getDebugMode: TypedContractMethod<[], [boolean], "view">;

  getDefaultSlippage: TypedContractMethod<[], [bigint], "view">;

  getFactory: TypedContractMethod<[], [string], "view">;

  getRouter: TypedContractMethod<[], [string], "view">;

  getTestMode: TypedContractMethod<[], [boolean], "view">;

  pancakeCall: TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setDeadlineMinutes: TypedContractMethod<
    [_minutes: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDebugMode: TypedContractMethod<
    [_debugMode: boolean],
    [void],
    "nonpayable"
  >;

  setDefaultSlippage: TypedContractMethod<
    [_slippage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTestMode: TypedContractMethod<[_testMode: boolean], [void], "nonpayable">;

  start: TypedContractMethod<
    [
      _token0: AddressLike,
      _borrow_amt: BigNumberish,
      _token1: AddressLike,
      _token2: AddressLike,
      _deadlineMinutes: BigNumberish,
      _slippageValues: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  withdrawBaseToken: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundFlashSwapContract"
  ): TypedContractMethod<
    [_owner: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalanceOfToken"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBaseToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDeadlineMinutes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDebugMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getDefaultSlippage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTestMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pancakeCall"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDeadlineMinutes"
  ): TypedContractMethod<[_minutes: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDebugMode"
  ): TypedContractMethod<[_debugMode: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultSlippage"
  ): TypedContractMethod<[_slippage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTestMode"
  ): TypedContractMethod<[_testMode: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "start"
  ): TypedContractMethod<
    [
      _token0: AddressLike,
      _borrow_amt: BigNumberish,
      _token1: AddressLike,
      _token2: AddressLike,
      _deadlineMinutes: BigNumberish,
      _slippageValues: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawBaseToken"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ArbitrageExecuted"
  ): TypedContractEvent<
    ArbitrageExecutedEvent.InputTuple,
    ArbitrageExecutedEvent.OutputTuple,
    ArbitrageExecutedEvent.OutputObject
  >;
  getEvent(
    key: "DebugFlashLoanReceived"
  ): TypedContractEvent<
    DebugFlashLoanReceivedEvent.InputTuple,
    DebugFlashLoanReceivedEvent.OutputTuple,
    DebugFlashLoanReceivedEvent.OutputObject
  >;
  getEvent(
    key: "DebugPoolLiquidity"
  ): TypedContractEvent<
    DebugPoolLiquidityEvent.InputTuple,
    DebugPoolLiquidityEvent.OutputTuple,
    DebugPoolLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "DebugTradeExecuted"
  ): TypedContractEvent<
    DebugTradeExecutedEvent.InputTuple,
    DebugTradeExecutedEvent.OutputTuple,
    DebugTradeExecutedEvent.OutputObject
  >;

  filters: {
    "ArbitrageExecuted(address,uint256,uint256,uint256,bool)": TypedContractEvent<
      ArbitrageExecutedEvent.InputTuple,
      ArbitrageExecutedEvent.OutputTuple,
      ArbitrageExecutedEvent.OutputObject
    >;
    ArbitrageExecuted: TypedContractEvent<
      ArbitrageExecutedEvent.InputTuple,
      ArbitrageExecutedEvent.OutputTuple,
      ArbitrageExecutedEvent.OutputObject
    >;

    "DebugFlashLoanReceived(address,uint256)": TypedContractEvent<
      DebugFlashLoanReceivedEvent.InputTuple,
      DebugFlashLoanReceivedEvent.OutputTuple,
      DebugFlashLoanReceivedEvent.OutputObject
    >;
    DebugFlashLoanReceived: TypedContractEvent<
      DebugFlashLoanReceivedEvent.InputTuple,
      DebugFlashLoanReceivedEvent.OutputTuple,
      DebugFlashLoanReceivedEvent.OutputObject
    >;

    "DebugPoolLiquidity(address,address,address,uint256,uint256)": TypedContractEvent<
      DebugPoolLiquidityEvent.InputTuple,
      DebugPoolLiquidityEvent.OutputTuple,
      DebugPoolLiquidityEvent.OutputObject
    >;
    DebugPoolLiquidity: TypedContractEvent<
      DebugPoolLiquidityEvent.InputTuple,
      DebugPoolLiquidityEvent.OutputTuple,
      DebugPoolLiquidityEvent.OutputObject
    >;

    "DebugTradeExecuted(uint8,address,address,uint256,uint256)": TypedContractEvent<
      DebugTradeExecutedEvent.InputTuple,
      DebugTradeExecutedEvent.OutputTuple,
      DebugTradeExecutedEvent.OutputObject
    >;
    DebugTradeExecuted: TypedContractEvent<
      DebugTradeExecutedEvent.InputTuple,
      DebugTradeExecutedEvent.OutputTuple,
      DebugTradeExecutedEvent.OutputObject
    >;
  };
}
